(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{426:function(s,t,a){"use strict";a.r(t);var n=a(19),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"什么是渐进分析-推导大-o-符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是渐进分析-推导大-o-符号"}},[s._v("#")]),s._v(" 什么是渐进分析？(推导大 O 符号)")]),s._v(" "),a("p",[a("mark",[s._v("渐进分析")]),s._v("是一种描述函数在极限附近的行为的方法,当输入规模足够大与运行时间的增长量相关时,我们就要研究算法的渐进效率")]),s._v(" "),a("p",[s._v("简单来说就是输入规模无限增加,那么算法所消耗的时间是如何随着输入增加而增加的,这个过程就是"),a("mark",[s._v("渐进分析")])]),s._v(" "),a("p",[s._v("渐进分析有如下三个步骤:")]),s._v(" "),a("h3",{attrs:{id:"_1-定义函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义函数"}},[s._v("#")]),s._v(" 1. 定义函数")]),s._v(" "),a("ul",[a("li",[s._v("计算代码表达式执行的次数")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sumUp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//代码表达式1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//代码表达式2")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//代码表达式3")]),s._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//代码表达式4")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当前函数参数n 并无特定值,所以需要我们定义")]),s._v("\n设定 n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//当n=1时,        当n=3时          当n=10时            当n=x时")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表达式1执行1次   表达式1执行1次    表达式1执行1次      表达式1执行1次")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表达式2执行1次   表达式2执行1次    表达式2执行1次      表达式2执行1次")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表达式3执行1次   表达式3执行3次    表达式3执行10次     表达式3执行x次")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//表达式4执行1次   表达式4执行1次    表达式4执行1次      表达式4执行1次")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("结论")]),s._v(" "),a("p",[s._v("通过上述的测试,可以推导出代码表达式执行次数,设次数为 T , 所以 T = 1+ 1 + n + 1 = 3+n = 3+ "),a("mark",[s._v("1")]),s._v(" * n, 虽然这样并不会直接得出当前函数的运行时间,其因为在计算机中影响代码执行时间的因素有很多,假设每行代码花费相同的时间,那么我们就可以通过运行的次数,可以衡量他们的性能。因为运行的次数越多,消耗的时间肯定是越多")])]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("至于最终为什么会转换成 "),a("mark",[s._v("3+ 1 * n")]),s._v(",是因为假如我们上述函数的代码表达式 3 中在多添加一行代码,如 console.log()。那么最后的公式应该是"),a("mark",[s._v("3+ 2 * n")]),s._v("这样我们虽然会得到不一样的线性图形,但是整体走向和趋势是一样的。我们其实更关注的是整体走向和趋势")])]),s._v(" "),a("ul",[a("li",[s._v("最后,我们可以推导出一个通用线性函数 T = a * n + b")])]),s._v(" "),a("h3",{attrs:{id:"_2-找到最快增长项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-找到最快增长项"}},[s._v("#")]),s._v(" 2.找到最快增长项")]),s._v(" "),a("ul",[a("li",[s._v("因为 b 是常数, 所以变化部分 只有 a* n 这一部分,所以 最快增长项为 T = a * n。 n 越大,增长速度越快")])]),s._v(" "),a("h3",{attrs:{id:"_3-去掉前面的系数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-去掉前面的系数"}},[s._v("#")]),s._v(" 3.去掉前面的系数")]),s._v(" "),a("ul",[a("li",[s._v("因为我们不关心具体的值,只关心整体趋势和走向. 所以最后推导出 T = n 。及 "),a("mark",[s._v("O(n)代表为线性时间复杂度")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/%E7%BA%BF%E6%80%A7.png",alt:""}})])])}),[],!1,null,null,null);t.default=r.exports}}]);